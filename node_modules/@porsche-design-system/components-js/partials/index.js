(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['@porsche-design-system/partials'] = {}));
}(this, (function (exports) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var getCdnBaseUrl = function (cdn) { return cdn === 'cn' ? 'https://cdn.ui.porsche.cn' : 'https://cdn.ui.porsche.com'; };
    var getFontFaceStylesheet = function (opts) {
        var options = __assign({ cdn: 'auto', withoutTags: false }, opts);
        var cdn = options.cdn, withoutTags = options.withoutTags;
        var url = getCdnBaseUrl(cdn) + "/porsche-design-system/styles/" + (cdn === 'cn'
            ? 'font-face.min.cn.ab128226e97d77abe80c8c491374b9b3.css'
            : 'font-face.min.6fdc3844907953937260ca9bdb49bf8d.css');
        return withoutTags
            ? url
            : "<link rel=stylesheet href=" + url + " type=text/css crossorigin>";
    };
    var getInitialStyles = function (opts) {
        var options = __assign({ prefix: '', withoutTags: false }, opts);
        var prefix = options.prefix, withoutTags = options.withoutTags;
        var tagNames = ['p-banner', 'p-button', 'p-button-pure', 'p-checkbox-wrapper', 'p-content-wrapper', 'p-divider', 'p-fieldset-wrapper', 'p-flex', 'p-flex-item', 'p-grid', 'p-grid-item', 'p-headline', 'p-icon', 'p-link', 'p-link-pure', 'p-link-social', 'p-marque', 'p-modal', 'p-pagination', 'p-radio-button-wrapper', 'p-select-wrapper', 'p-spinner', 'p-tabs', 'p-tabs-bar', 'p-tabs-item', 'p-text', 'p-text-field-wrapper', 'p-text-list', 'p-text-list-item', 'p-textarea-wrapper'];
        var styleInnerHtml = tagNames.map(function (x) { return prefix
            ? prefix + "-" + x
            : x; }).join(',') + '{visibility:hidden}';
        return withoutTags
            ? styleInnerHtml
            : "<style>" + styleInnerHtml + "</style>";
    };
    function getFontLinks(opts) {
        var options = __assign({ subset: 'latin', weights: ['regular'], cdn: 'auto', withoutTags: false }, opts);
        var subset = options.subset, weights = options.weights, cdn = options.cdn, withoutTags = options.withoutTags;
        if (options['weight']) {
            throw new Error('Option "weight" is not supported, please use "weights" instead');
        }
        var cdnBaseUrl = getCdnBaseUrl(cdn);
        var fonts = {
            latin: {
                thin: 'porsche-next-w-la-thin.min.3e75ff5246ab2497c06392d22ff862d0.woff2',
                regular: 'porsche-next-w-la-regular.min.bdaf41e62559316d30f99df258039d4e.woff2',
                'semi-bold': 'porsche-next-w-la-semi-bold.min.c24c2ecdded2c1342dba0f1d561dde72.woff2',
                bold: 'porsche-next-w-la-bold.min.6b20b9525a53943efc0131a2def13eab.woff2'
            },
            greek: {
                thin: 'porsche-next-w-gr-thin.min.312cc1dd7eb0e1c79f93deaac95c9275.woff2',
                regular: 'porsche-next-w-gr-regular.min.80abee51bf7b9f9817762c30882d5611.woff2',
                'semi-bold': 'porsche-next-w-gr-semi-bold.min.5634b60bad2a93a2d1c291312481cae8.woff2',
                bold: 'porsche-next-w-gr-bold.min.4fd752331f433ac4991a05b612857110.woff2'
            },
            cyril: {
                thin: 'porsche-next-w-cy-thin.min.0117e59ba6516f01c62a5bf3dccda94a.woff2',
                regular: 'porsche-next-w-cy-regular.min.521f76128d587fc30f9a8683e7075654.woff2',
                'semi-bold': 'porsche-next-w-cy-semi-bold.min.c9c84da2e29ab986c3d9d9e664805e2a.woff2',
                bold: 'porsche-next-w-cy-bold.min.1f9d4ce7ba8d151c8c371ca105946330.woff2'
            }
        };
        var supportedSubsets = ["latin", "greek", "cyril"];
        var supportedWeights = ["thin", "regular", "semi-bold", "bold"];
        var isSubsetInvalid = !supportedSubsets.includes(subset);
        var invalidWeights = weights.filter(function (x) { return !supportedWeights.includes(x); });
        if (isSubsetInvalid) {
            throw new Error("The following supplied font subset is invalid:\n  " + subset + "\n\nPlease use only valid font subset:\n  " + supportedSubsets.join(', '));
        }
        if (invalidWeights.length) {
            throw new Error("The following supplied font weights are invalid:\n  " + invalidWeights.join(', ') + "\n\nPlease use only valid font weights:\n  " + supportedWeights.join(', '));
        }
        var urls = weights.map(function (weight) { return cdnBaseUrl + "/porsche-design-system/fonts/" + fonts[subset][weight]; });
        var links = urls.map(function (link) { return "<link rel=preload href=" + link + " as=font type=font/woff2 crossorigin>"; }).join('');
        return withoutTags ? urls : links;
    }
    function getComponentChunkLinks(opts) {
        var options = __assign({ components: [], cdn: 'auto', withoutTags: false }, opts);
        var components = options.components, cdn = options.cdn, withoutTags = options.withoutTags;
        var supportedComponentChunkNames = ["banner", "button-pure", "button", "checkbox-wrapper", "content-wrapper", "divider", "fieldset-wrapper", "flex", "grid", "headline", "icon", "link-pure", "link-social", "link", "marque", "modal", "pagination", "radio-button-wrapper", "select-wrapper", "spinner", "tabs-bar", "tabs", "text-field-wrapper", "text-list", "text", "textarea-wrapper"];
        var invalidComponentChunkNames = components.filter(function (x) { return !supportedComponentChunkNames.includes(x); });
        if (invalidComponentChunkNames.length) {
            throw new Error("The following supplied component chunk names are invalid:\n  " + invalidComponentChunkNames.join(', ') + "\n\nPlease use only valid component chunk names:\n  " + supportedComponentChunkNames.join(', '));
        }
        var cdnBaseUrl = getCdnBaseUrl(cdn);
        var manifest = { "core": "porsche-design-system.v2.0.0-rc.5.65f70672e725b3349a88.js", "banner": "porsche-design-system.banner.e61b407e1271c5d6c276.js", "button-pure": "porsche-design-system.button-pure.cf9be4bb761724398e5a.js", "button": "porsche-design-system.button.d0a15d54a10d69ff4f67.js", "checkbox-wrapper": "porsche-design-system.checkbox-wrapper.5a418fc7583e55324883.js", "content-wrapper": "porsche-design-system.content-wrapper.d856a733d95aded69ae8.js", "divider": "porsche-design-system.divider.a490154af7fa20002db2.js", "fieldset-wrapper": "porsche-design-system.fieldset-wrapper.dad2e1449d690816e300.js", "flex": "porsche-design-system.flex.8a487cec25d3bfad6437.js", "grid": "porsche-design-system.grid.2cc6f978227388ed11e0.js", "headline": "porsche-design-system.headline.bb9045caa605da00d1b0.js", "icon": "porsche-design-system.icon.26a90f42a96935edda39.js", "link-pure": "porsche-design-system.link-pure.b56dbc2245356e50484a.js", "link-social": "porsche-design-system.link-social.b3aff3db7d2b37e1bbda.js", "link": "porsche-design-system.link.36cb1d6dd5fe5f0354b1.js", "marque": "porsche-design-system.marque.64d37310f63727365d00.js", "modal": "porsche-design-system.modal.175a40902b9956fa3631.js", "pagination": "porsche-design-system.pagination.1885e08f27efbbadb117.js", "radio-button-wrapper": "porsche-design-system.radio-button-wrapper.da30c7c59177430da30b.js", "select-wrapper": "porsche-design-system.select-wrapper.69f10f423a6860f75352.js", "spinner": "porsche-design-system.spinner.257d47890205c234b339.js", "tabs-bar": "porsche-design-system.tabs-bar.b901848c81cc93680f5c.js", "tabs": "porsche-design-system.tabs.26747edbdaac10185442.js", "text-field-wrapper": "porsche-design-system.text-field-wrapper.41e51e87715f777aa274.js", "text-list": "porsche-design-system.text-list.b05d748af041feedd138.js", "text": "porsche-design-system.text.b71e27124ecbb8406a83.js", "textarea-wrapper": "porsche-design-system.textarea-wrapper.84eae6054c84181df903.js" };
        var urls = ['core'].concat(components).map(function (cmp) { return cdnBaseUrl + "/porsche-design-system/components/" + manifest[cmp]; });
        var links = urls
            .map(function (url) { return "<link rel=preload href=" + url + " as=script>"; })
            .map(function (link, idx) { return idx === 0 ? link.replace('>', ' crossorigin>') : link; }) // core needs crossorigin attribute
            .join('');
        return withoutTags ? urls : links;
    }

    exports.getComponentChunkLinks = getComponentChunkLinks;
    exports.getFontFaceStylesheet = getFontFaceStylesheet;
    exports.getFontLinks = getFontLinks;
    exports.getInitialStyles = getInitialStyles;

})));
