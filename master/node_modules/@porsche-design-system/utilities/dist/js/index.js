(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib')) :
    typeof define === 'function' && define.amd ? define(['exports', 'tslib'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['@porsche-design-system/utilities'] = {}, global.tslib));
}(this, (function (exports, tslib) { 'use strict';

    var breakpoint = {
        xxs: 0,
        xs: 480,
        s: 760,
        m: 1000,
        l: 1300,
        xl: 1760,
        xxl: 1920,
    };
    var mediaQuery = function (minBreakpoint, maxBreakpoint) {
        return "@media (min-width: " + ((typeof minBreakpoint !== 'number' && breakpoint[minBreakpoint]) || minBreakpoint) + "px)" + (maxBreakpoint
            ? " and (max-width: " + ((typeof maxBreakpoint !== 'number' && breakpoint[maxBreakpoint]) || maxBreakpoint) + "px)"
            : '');
    };

    /* Auto Generated File */
    var title = { "large": { "fontFamily": "\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif", "fontWeight": 600, "fontSize": "2rem", "lineHeight": 1.375, "@media (min-width: 760px) and (max-width: 1000px)": { "fontSize": "2.625rem", "lineHeight": 1.2380952381 }, "@media (min-width: 1000px) and (max-width: 1300px)": { "fontSize": "3.25rem", "lineHeight": 1.2307692308 }, "@media (min-width: 1300px) and (max-width: 1760px)": { "fontSize": "3.875rem", "lineHeight": 1.2258064516 }, "@media (min-width: 1760px)": { "fontSize": "4.5rem", "lineHeight": 1.2222222222 } } };
    var headline = { "1": { "fontFamily": "\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif", "fontWeight": 600, "fontSize": "1.75rem", "lineHeight": 1.4285714286, "@media (min-width: 760px) and (max-width: 1000px)": { "fontSize": "2.25rem", "lineHeight": 1.3333333333 }, "@media (min-width: 1000px) and (max-width: 1300px)": { "fontSize": "2.75rem", "lineHeight": 1.1818181818 }, "@media (min-width: 1300px) and (max-width: 1760px)": { "fontSize": "3.25rem", "lineHeight": 1.2307692308 }, "@media (min-width: 1760px)": { "fontSize": "3.75rem", "lineHeight": 1.2 } }, "2": { "fontFamily": "\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif", "fontWeight": 600, "fontSize": "1.5rem", "lineHeight": 1.5, "@media (min-width: 760px) and (max-width: 1000px)": { "fontSize": "1.875rem", "lineHeight": 1.3333333333 }, "@media (min-width: 1000px) and (max-width: 1300px)": { "fontSize": "2.25rem", "lineHeight": 1.3333333333 }, "@media (min-width: 1300px) and (max-width: 1760px)": { "fontSize": "2.625rem", "lineHeight": 1.2380952381 }, "@media (min-width: 1760px)": { "fontSize": "3rem", "lineHeight": 1.25 } }, "3": { "fontFamily": "\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif", "fontWeight": 600, "fontSize": "1.25rem", "lineHeight": 1.4, "@media (min-width: 760px) and (max-width: 1000px)": { "fontSize": "1.5rem", "lineHeight": 1.5 }, "@media (min-width: 1000px) and (max-width: 1300px)": { "fontSize": "1.75rem", "lineHeight": 1.4285714286 }, "@media (min-width: 1300px) and (max-width: 1760px)": { "fontSize": "2rem", "lineHeight": 1.375 }, "@media (min-width: 1760px)": { "fontSize": "2.25rem", "lineHeight": 1.3333333333 } }, "4": { "fontFamily": "\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif", "fontWeight": 600, "fontSize": "1rem", "lineHeight": 1.5, "@media (min-width: 760px) and (max-width: 1000px)": { "fontSize": "1.125rem", "lineHeight": 1.5555555556 }, "@media (min-width: 1000px) and (max-width: 1300px)": { "fontSize": "1.25rem", "lineHeight": 1.4 }, "@media (min-width: 1300px) and (max-width: 1760px)": { "fontSize": "1.375rem", "lineHeight": 1.4545454545 }, "@media (min-width: 1760px)": { "fontSize": "1.5rem", "lineHeight": 1.5 } }, "5": { "fontFamily": "\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif", "fontWeight": 600, "fontSize": "1rem", "lineHeight": 1.5 } };
    var text = { "xSmall": { "fontFamily": "\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif", "fontWeight": 400, "fontSize": "0.75rem", "lineHeight": 1.6666666667 }, "small": { "fontFamily": "\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif", "fontWeight": 400, "fontSize": "1rem", "lineHeight": 1.5 }, "medium": { "fontFamily": "\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif", "fontWeight": 400, "fontSize": "1.5rem", "lineHeight": 1.5 }, "large": { "fontFamily": "\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif", "fontWeight": 400, "fontSize": "2.25rem", "lineHeight": 1.3333333333 }, "xLarge": { "fontFamily": "\"Porsche Next\", \"Arial Narrow\", Arial, sans-serif", "fontWeight": 400, "fontSize": "3.25rem", "lineHeight": 1.2307692308 } };

    var color = {
        /**
         * Theme light as default theme
         */
        brand: '#d5001c',
        default: '#000',
        background: {
            default: '#fff',
            surface: '#f2f2f2',
            shading: 'rgba(14, 20, 24, 0.9)',
        },
        neutralContrast: {
            high: '#323639',
            medium: '#626669',
            low: '#e3e4e5',
        },
        notification: {
            success: '#018a16',
            successSoft: '#e5f3e7',
            warning: '#ff9b00',
            warningSoft: '#fff5e5',
            error: '#e00000',
            errorSoft: '#fae6e6',
            neutral: '#0061bd',
            neutralSoft: '#e5eff8',
        },
        state: {
            hover: '#d5001c',
            active: '#d5001c',
            focus: 'currentColor',
            disabled: '#96989a',
        },
        /**
         * Theme dark as optional
         */
        darkTheme: {
            brand: '#d5001c',
            default: '#fff',
            background: {
                default: '#0e1418',
                surface: '#262b2e',
                shading: 'rgba(14, 20, 24, 0.9)',
            },
            neutralContrast: {
                high: '#e3e4e5',
                medium: '#b0b1b2',
                low: '#4a4e51',
            },
            notification: {
                success: '#01ba1d',
                successSoft: '#bfeec6',
                warning: '#ff9b00',
                warningSoft: '#ffe6bf',
                error: '#fc1717',
                errorSoft: '#fec5c5',
                neutral: '#2193ff',
                neutralSoft: '#c7e4ff',
            },
            state: {
                hover: '#ff0223',
                active: '#ff0223',
                focus: 'currentColor',
                disabled: '#7c7f81',
            },
        },
        /**
         * External brand colors
         */
        external: {
            facebook: '#1877f2',
            google: '#4285f4',
            instagram: '#e1306c',
            linkedin: '#0077b5',
            pinterest: '#e60023',
            twitter: '#1da1f2',
            wechat: '#1aad19',
            whatsapp: '#25d366',
            xing: '#006567',
            youtube: '#ff0000',
        },
    };

    var font = {
        family: '"Porsche Next", "Arial Narrow", Arial, sans-serif',
        weight: {
            thin: 100,
            regular: 400,
            semibold: 600,
            bold: 700,
        },
        // To boost performance, size is defined static.
        size: {
            '12': { fontSize: '0.75rem', lineHeight: 1.6666666667 },
            '16': { fontSize: '1rem', lineHeight: 1.5 },
            '18': { fontSize: '1.125rem', lineHeight: 1.5555555556 },
            '20': { fontSize: '1.25rem', lineHeight: 1.4 },
            '22': { fontSize: '1.375rem', lineHeight: 1.4545454545 },
            '24': { fontSize: '1.5rem', lineHeight: 1.5 },
            '28': { fontSize: '1.75rem', lineHeight: 1.4285714286 },
            '30': { fontSize: '1.875rem', lineHeight: 1.3333333333 },
            '32': { fontSize: '2rem', lineHeight: 1.375 },
            '36': { fontSize: '2.25rem', lineHeight: 1.3333333333 },
            '42': { fontSize: '2.625rem', lineHeight: 1.2380952381 },
            '44': { fontSize: '2.75rem', lineHeight: 1.1818181818 },
            '48': { fontSize: '3rem', lineHeight: 1.25 },
            '52': { fontSize: '3.25rem', lineHeight: 1.2307692308 },
            '60': { fontSize: '3.75rem', lineHeight: 1.2 },
            '62': { fontSize: '3.875rem', lineHeight: 1.2258064516 },
            '72': { fontSize: '4.5rem', lineHeight: 1.2222222222 },
            '84': { fontSize: '5.25rem', lineHeight: 1.1904761905 },
            'xSmall': { fontSize: '0.75rem', lineHeight: 1.6666666667 },
            'small': { fontSize: '1rem', lineHeight: 1.5 },
            'medium': { fontSize: '1.5rem', lineHeight: 1.5 },
            'large': { fontSize: '2.25rem', lineHeight: 1.3333333333 },
            'xLarge': { fontSize: '3.25rem', lineHeight: 1.2307692308 },
        },
    };

    var spacing = {
        '4': '0.25rem',
        '8': '0.5rem',
        '16': '1rem',
        '24': '1.5rem',
        '32': '2rem',
        '40': '2.5rem',
        '48': '3rem',
        '56': '3.5rem',
        '64': '4rem',
        '72': '4.5rem',
        '80': '5rem',
    };
    var layout = {
        xSmall: spacing['4'],
        small: spacing['8'],
        medium: spacing['16'],
        large: spacing['32'],
        xLarge: spacing['48'],
        xxLarge: spacing['80'],
    };

    var defaultOptions = { color: color.state.focus, offset: '2px' };
    var focus = function (opts) {
        var options = tslib.__assign(tslib.__assign({}, defaultOptions), opts);
        var color = options.color, offset = options.offset, _a = options.pseudo, pseudo = _a === void 0 ? '' : _a;
        return "\n::-moz-focus-inner { border: 0; }\n" + (pseudo
            ? "\n& { outline: transparent none; }\n&" + pseudo + "{"
            : '') + "\noutline: transparent solid 1px;\noutline-offset: " + offset + ";\n" + (pseudo
            ? "content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;}" // Closing bracket from adding &${pseudo}
            : '') + "\n&:focus" + pseudo + " { outline-color: " + color + "; }\n&:focus:not(:focus-visible)" + pseudo + " { outline-color: transparent; }";
    };

    var FONT_SIZE_REGEX = /^(\d+\.?\d*)(rem|px)$/;
    var REM_BASE = 16;
    var pxToRem = function (px) {
        var _a;
        var _b = (_a = px === null || px === void 0 ? void 0 : px.match(FONT_SIZE_REGEX)) !== null && _a !== void 0 ? _a : [], fontSizeValue = _b[1], fontSizeUnit = _b[2];
        if (fontSizeUnit !== 'px' || fontSizeValue === '0') {
            throw new Error('function only accepts value in rem and not 0, e.g. 16px');
        }
        else {
            return parseFloat("" + fontSizeValue) / REM_BASE + "rem";
        }
    };
    var remToPx = function (rem) {
        var _a;
        var _b = (_a = rem === null || rem === void 0 ? void 0 : rem.match(FONT_SIZE_REGEX)) !== null && _a !== void 0 ? _a : [], fontSizeValue = _b[1], fontSizeUnit = _b[2];
        if (fontSizeUnit !== 'rem' || fontSizeValue === '0') {
            throw new Error('function only accepts value in rem and not 0, e.g. 1.5rem');
        }
        else {
            return parseFloat("" + fontSizeValue) * REM_BASE + "px";
        }
    };
    var generateFontDefinition = function (fontSize, fontWeight) {
        var family = font.family, weight = font.weight;
        return Object.assign({}, {
            fontFamily: family,
            fontWeight: weight[fontWeight],
        }, generateTypeScale(fontSize));
    };
    var generateTypeScale = function (fontSize) {
        var _a;
        var _b = (_a = fontSize === null || fontSize === void 0 ? void 0 : fontSize.match(FONT_SIZE_REGEX)) !== null && _a !== void 0 ? _a : [], fontSizeValue = _b[1], fontSizeUnit = _b[2];
        if (fontSizeUnit === undefined) {
            throw new Error('getFontSizeRem() only accepts rem or px as parameter');
        }
        else if (fontSizeValue === undefined || fontSizeValue === '0') {
            throw new Error('fontSize value has to be a Number and not 0');
        }
        var convertedFontSize = fontSizeUnit === 'rem' ? fontSize : pxToRem(fontSize);
        return {
            fontSize: convertedFontSize,
            lineHeight: calculateLineHeight(fontSize),
        };
    };
    var calculateLineHeight = function (fontSize) {
        var _a;
        var _b = (_a = fontSize === null || fontSize === void 0 ? void 0 : fontSize.match(FONT_SIZE_REGEX)) !== null && _a !== void 0 ? _a : [], fontSizeValue = _b[1], fontSizeUnit = _b[2];
        if (fontSizeUnit === undefined || fontSizeValue === undefined || fontSizeValue === '0') {
            throw new Error("font size needs to be value + px or rem and not 0, e.g. 15rem or 16px, received: '" + fontSize + "'");
        }
        var fontSizePx = fontSizeUnit === 'rem' ? remToPx(fontSize) : fontSizeValue;
        var fontSizeLength = parseFloat(fontSizePx);
        var e = 2.71828;
        var exactLineHeightFactor = 0.911 / (2.97 + 0.005 * Math.pow(e, 0.2 * fontSizeLength)) + 1.2;
        var exactLineHeightPx = fontSizeLength * exactLineHeightFactor;
        var remainingPx = exactLineHeightPx % 4;
        if (remainingPx > 2) {
            remainingPx = remainingPx - 4;
        }
        var roundingFactor = 10000000000;
        var fittedLineHeightPx = exactLineHeightPx - remainingPx;
        var fittedLineHeightFactor = fittedLineHeightPx / fontSizeLength;
        return Math.round(fittedLineHeightFactor * roundingFactor) / roundingFactor;
    };

    /* Auto Generated Below */
    var CDN_KEY = 'PORSCHE_DESIGN_SYSTEM_CDN';
    var isCdnCn = typeof window !== 'undefined' && window[CDN_KEY] === 'cn';
    var FONT_FACE_CDN_URL = (isCdnCn ? 'https://cdn.ui.porsche.cn' : 'https://cdn.ui.porsche.com') + '/porsche-design-system/styles/' + (isCdnCn ? 'font-face.min.cn.ab128226e97d77abe80c8c491374b9b3.css' : 'font-face.min.6fdc3844907953937260ca9bdb49bf8d.css');
    /**
     * @deprecated since v1.1.0.
     * Please use FONT_FACE_CDN_URL instead.
     */
    var FONT_FACE_STYLE_CDN_URL = FONT_FACE_CDN_URL;

    exports.FONT_FACE_CDN_URL = FONT_FACE_CDN_URL;
    exports.FONT_FACE_STYLE_CDN_URL = FONT_FACE_STYLE_CDN_URL;
    exports.breakpoint = breakpoint;
    exports.calculateLineHeight = calculateLineHeight;
    exports.color = color;
    exports.focus = focus;
    exports.font = font;
    exports.generateFontDefinition = generateFontDefinition;
    exports.generateTypeScale = generateTypeScale;
    exports.headline = headline;
    exports.layout = layout;
    exports.mediaQuery = mediaQuery;
    exports.pxToRem = pxToRem;
    exports.remToPx = remToPx;
    exports.spacing = spacing;
    exports.text = text;
    exports.title = title;

})));
